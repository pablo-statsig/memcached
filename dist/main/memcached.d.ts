import { CallbackFunction, IMemcachedConfig, Servers } from './types';
import { EventEmitter } from 'events';
export declare class Memcached extends EventEmitter {
    static config: IMemcachedConfig;
    private _config;
    private _hashRing;
    private _activeQueries;
    private _servers;
    private _issues;
    private _connections;
    constructor(servers: Servers, options?: Partial<IMemcachedConfig>);
    end(): void;
    touch(key: string, ttl: number, callback: CallbackFunction): void;
    set(key: string, value: any, callback: CallbackFunction): void;
    set(key: string, value: any, ttl: number, callback: CallbackFunction): void;
    add(key: string, value: any, callback: CallbackFunction): void;
    add(key: string, value: any, ttl: number, callback: CallbackFunction): void;
    cas(key: string, value: any, cas: string, callback: CallbackFunction): void;
    cas(key: string, value: any, cas: string, ttl: number, callback: CallbackFunction): void;
    del(key: string, callback: CallbackFunction): void;
    delete(key: string, callback: CallbackFunction): void;
    get<T = any>(key: string | Array<string>, callback: CallbackFunction<T>): void;
    gets(key: string, callback: CallbackFunction): void;
    getMulti(keys: Array<string>, callback: CallbackFunction): void;
    incr(key: string, value: number, callback: CallbackFunction): void;
    increment(key: string, value: number, callback: CallbackFunction): void;
    decr(key: string, value: number, callback: CallbackFunction): void;
    decrement(key: string, value: number, callback: CallbackFunction): void;
    cachedump(server: string, slabid: number, num: number, callback: CallbackFunction): void;
    version(callback: CallbackFunction): void;
    flush(callback: CallbackFunction): void;
    flushAll(callback: CallbackFunction): void;
    stats(callback: CallbackFunction): void;
    settings(callback: CallbackFunction): void;
    statsSettings(callback: CallbackFunction): void;
    slabs(callback: CallbackFunction): void;
    statsSlabs(callback: CallbackFunction): void;
    items(callback: CallbackFunction): void;
    statsItems(callback: CallbackFunction): void;
    private _singles;
    private _incrdecr;
    private _setters;
    private _errorResponse;
    private _makeCallback;
    private _multi;
    private _failedServers;
    private _executeCommand;
    private _connectionIssue;
    private _connect;
    private _buffer;
    private _rawDataReceived;
    private _parse;
    private _parseResults;
    private _delegateCallback;
}
